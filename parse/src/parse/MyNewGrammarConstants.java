/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASSIGN = 5;
  /** RegularExpression Id. */
  int GT = 6;
  /** RegularExpression Id. */
  int LT = 7;
  /** RegularExpression Id. */
  int EQ = 8;
  /** RegularExpression Id. */
  int LE = 9;
  /** RegularExpression Id. */
  int GE = 10;
  /** RegularExpression Id. */
  int NE = 11;
  /** RegularExpression Id. */
  int ADD = 12;
  /** RegularExpression Id. */
  int MINUSD = 13;
  /** RegularExpression Id. */
  int REM = 14;
  /** RegularExpression Id. */
  int AND = 15;
  /** RegularExpression Id. */
  int OR = 16;
  /** RegularExpression Id. */
  int BOOLEAN = 17;
  /** RegularExpression Id. */
  int CHAR = 18;
  /** RegularExpression Id. */
  int BYTE = 19;
  /** RegularExpression Id. */
  int SHORT = 20;
  /** RegularExpression Id. */
  int INT = 21;
  /** RegularExpression Id. */
  int LONG = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int MULTIPLY = 27;
  /** RegularExpression Id. */
  int DIVIDE = 28;
  /** RegularExpression Id. */
  int CONSTANT = 29;
  /** RegularExpression Id. */
  int DIGIT = 30;
  /** RegularExpression Id. */
  int BREAK = 31;
  /** RegularExpression Id. */
  int CASE = 32;
  /** RegularExpression Id. */
  int CONST = 33;
  /** RegularExpression Id. */
  int CONTINUE = 34;
  /** RegularExpression Id. */
  int _DEFAULT = 35;
  /** RegularExpression Id. */
  int DO = 36;
  /** RegularExpression Id. */
  int TYPEDEF = 37;
  /** RegularExpression Id. */
  int ELSE = 38;
  /** RegularExpression Id. */
  int FOR = 39;
  /** RegularExpression Id. */
  int IF = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int SWITCH = 42;
  /** RegularExpression Id. */
  int VOID = 43;
  /** RegularExpression Id. */
  int WHILE = 44;
  /** RegularExpression Id. */
  int MAIN = 45;
  /** RegularExpression Id. */
  int LC = 46;
  /** RegularExpression Id. */
  int RC = 47;
  /** RegularExpression Id. */
  int LM = 48;
  /** RegularExpression Id. */
  int RM = 49;
  /** RegularExpression Id. */
  int LB = 50;
  /** RegularExpression Id. */
  int RB = 51;
  /** RegularExpression Id. */
  int ID = 52;
  /** RegularExpression Id. */
  int LETTER = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"++\"",
    "\"--\"",
    "\"%\"",
    "\"&&\"",
    "\"||\"",
    "\"boolean\"",
    "\"char\"",
    "\"byte\"",
    "\"short\"",
    "\"int\"",
    "\"long\"",
    "\"float\"",
    "\"double\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<CONSTANT>",
    "<DIGIT>",
    "\"break\"",
    "\"case\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"typedef\"",
    "\"else\"",
    "\"for\"",
    "\"if\"",
    "\"return\"",
    "\"switch\"",
    "\"void\"",
    "\"while\"",
    "\"main\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "<ID>",
    "<LETTER>",
    "\";\"",
    "\",\"",
  };

}

/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package parse;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected static JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();public static int count = 0; /*四元式标号*/

  public static String tip = ""; /*或语义分析结果*/

  public static int ncount = 0; /*临时变量下标*/

  public static void main(String args []) throws ParseException
  {
    FileInputStream fileStream;
    //根据输入路径读取文件
//    System.out.println("Enter the txt's complete Route:");
//    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//    String filename = br.readLine();
//    System.out.println(filename);
//    fileStream = new FileInputStream(filename);
    try
    {
      fileStream = new FileInputStream("C://test.txt");
      MyNewGrammar parser = new MyNewGrammar(fileStream);
      try
      {
        switch (parser.start())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
        System.out.println(tip);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
    }
    catch (FileNotFoundException e1)
    {
      e1.printStackTrace();
    }
  }

  static final public int start() throws ParseException {
 /*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case VOID:
      case MAIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case VOID:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID:
            jj_consume_token(VOID);
            break;
          case INT:
            jj_consume_token(INT);
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(MAIN);
        jj_consume_token(LC);
        jj_consume_token(RC);
        block();
        jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return 0;}
        break;
      case 0:
        jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return 1;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void block() throws ParseException {
 /*@bgen(jjtree) block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case LONG:
      case FOR:
      case IF:
      case WHILE:
      case ID:
        statementstring();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RB);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void statementstring() throws ParseException {
 /*@bgen(jjtree) statementstring */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
      isstatement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void isstatement() throws ParseException {
 /*@bgen(jjtree) isstatement */
  SimpleNode jjtn000 = new SimpleNode(JJTISSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case LONG:
      case FOR:
      case IF:
      case WHILE:
      case ID:
        statementstring();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        assignment();
        break;
      case INT:
      case LONG:
        DeclareStatement();
        break;
      case IF:
        IfStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void assignment() throws ParseException {
 /*@bgen(jjtree) assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String variable [ ] = new String [ 2 ]; //其中存储place和offset两个变量。
  String E_place;
  String L_place;
  String L_offset;
    try {
      //赋值语句
        variable = var();
      jj_consume_token(ASSIGN);
      E_place = Expression();
      jj_consume_token(54);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    L_place = variable [ 0 ];
    L_offset = variable [ 1 ];
    if (L_offset == null)
    {
      count++;
      tip += count + ":\u005ct(\u005ct=:\u005ct,\u005ct" + E_place + "\u005ct,\u005ct_\u005ct,\u005ct" + L_place + ")" + "\u005cr\u005cn";
    }
    else
    {
      count++;
      tip += count + ":\u005ct(\u005ct=:\u005ct,\u005ct" + E_place + "\u005ct,\u005ct_\u005ct,\u005ct" + L_place + "[" + L_offset + "]" + ")" + "\u005cr\u005cn";
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DeclareStatement() throws ParseException {
 /*@bgen(jjtree) DeclareStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int width;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(ID);
        id();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    width = 8;
        break;
      case LONG:
        jj_consume_token(LONG);
        jj_consume_token(ID);
        id();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    width = 32;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void id() throws ParseException {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
      case 55:
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 55:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_1;
          }
          jj_consume_token(55);
          jj_consume_token(ID);
        }
        jj_consume_token(54);
        break;
      case LM:
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LM:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_2;
          }
          jj_consume_token(LM);
          jj_consume_token(CONSTANT);
          jj_consume_token(RM);
        }
        jj_consume_token(54);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int j, j1;
    try {
      jj_consume_token(IF);
      jj_consume_token(LC);
      Condition();
      jj_consume_token(RC);
    count++;
    j = count;
    tip += count + ":\u005ct(\u005ctj\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + "#)" + "\u005cr\u005cn";
    tip = tip.replaceAll("j2", (count + 1) + "");
      jj_consume_token(LB);
      isstatement();
      jj_consume_token(RB);
    tip = tip.replaceAll("#", (count + 2) + "");
    count++;
    j = count;
    tip += count + ":\u005ct(\u005ctJ\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + j + "#)" + "\u005cr\u005cn";
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case LONG:
        case FOR:
        case IF:
        case WHILE:
        case ID:
          statement();
          break;
        case LB:
          jj_consume_token(LB);
          isstatement();
          jj_consume_token(RB);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    tip = tip.replaceFirst(j + "#", (count + 1) + "");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  int j1;
  int j2;
  int next;
  int next1;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LC);
    next1 = count + 1;
      Condition();
      jj_consume_token(RC);
    count++;
    j1 = count;
    tip += count + ":\u005ct(\u005ctJ\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + j1 + "#)" + "\u005cr\u005cn";
      jj_consume_token(LB);
      statement();
      jj_consume_token(RB);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    count++;
    tip += count + ":\u005ct(\u005ctJ\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + next1 + ")" + "\u005cr\u005cn";
    tip = tip.replaceFirst(j1 + "#", (count + 1) + "");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public int Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  int next;
  String result;
  String middle;
    try {
      result = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        node = jj_consume_token(LT);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj<\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case GT:
        node = jj_consume_token(GT);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj>\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case GE:
        node = jj_consume_token(GE);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj>=\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case LE:
        node = jj_consume_token(LE);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj<=\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return next;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  int j1;
  int j2;
  int next;
  int next1;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LC);
    next1 = count + 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case LONG:
      case ID:
        ForFirst();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
      case LC:
      case ID:
        ForSecond();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(54);
    count++;
    j1 = count;
    tip += + count + ":\u005ct(\u005ctj\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + j1 + "#)" + "\u005cr\u005cn";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ForThird();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RC);
      jj_consume_token(LB);
      statement();
      jj_consume_token(RB);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    count++;
    tip += count + ":\u005ct(\u005ctj\u005ct,\u005ct_\u005ct,\u005ct_\u005ct,\u005ct" + next1 + ")" + "\u005cr\u005cn";
    tip = tip.replaceFirst(j1 + "#", (count + 1) + "");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForFirst() throws ParseException {
 /*@bgen(jjtree) ForFirst */
  SimpleNode jjtn000 = new SimpleNode(JJTFORFIRST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  String temp = "";
  String temp1 = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case LONG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          break;
        case LONG:
          jj_consume_token(LONG);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      temp = jj_consume_token(ID).image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        temp1 = Expression();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    count++;
    tip += count + ":\u005ct(\u005ct:=\u005ct,\u005ct" + temp1 + "\u005ct,\u005ct_\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public int ForSecond() throws ParseException {
 /*@bgen(jjtree) ForSecond */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSECOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);//Expression()("<"|">"|">="|"<=")Expression()
  Token node;
  int next;
  String result;
  String middle;
    try {
      result = Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        node = jj_consume_token(LT);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj<\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case GT:
        node = jj_consume_token(GT);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj>\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case GE:
        node = jj_consume_token(GE);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj>=\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      case LE:
        node = jj_consume_token(LE);
        middle = Expression();
      count++;
      next = count + 1;
      tip += count + ":\u005ct(\u005ctj<=\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + (next + 1) + ")" + "\u005cr\u005cn";
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return next;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ForThird() throws ParseException {
 /*@bgen(jjtree) ForThird */
  SimpleNode jjtn000 = new SimpleNode(JJTFORTHIRD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  String temp = "";
  String temp1 = "";
    try {
      temp = jj_consume_token(ID).image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      count++;
      tip += count + ":\u005ct(\u005ct++\u005ct,\u005ct" + temp + "\u005ct,\u005ct_\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        break;
      case MINUSD:
        jj_consume_token(MINUSD);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      count++;
      tip += count + ":\u005ct(\u005ct--\u005ct,\u005ct" + temp + "\u005ct,\u005ct_\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        temp1 = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      count++;
      tip += count + ":\u005ct(\u005ct:=\u005ct,\u005ct" + temp1 + "\u005ct,\u005ct_\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  String result;
  String middle;
  String temp = "";
    try {
      result = Term();
    temp = result;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          middle = Term();
      count++;
      temp = "T" + ncount;
      ncount++;
      tip += count + ":\u005ct(\u005ct+\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
      result = temp;
          break;
        case MINUS:
          jj_consume_token(MINUS);
          middle = Term();
      count++;
      temp = "T" + ncount;
      ncount++;
      tip += count + ":\u005ct(\u005ct-\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
      result = temp;
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return temp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Term() throws ParseException {
 /*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token node;
  String result;
  String middle;
  String temp = "";
    try {
      result = unary();
    temp = result;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          middle = unary();
        count++;
        temp = "T" + ncount;
        ncount++;
        tip += count + ":\u005ct(\u005ct*\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        result = temp;
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          middle = unary();
        count++;
        temp = "T" + ncount;
        ncount++;
        tip += count + ":\u005ct(\u005ct/\u005ct,\u005ct" + result + "\u005ct,\u005ct" + middle + "\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        result = temp;
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return temp;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String unary() throws ParseException {
 /*@bgen(jjtree) unary */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str;
    try {
      // str= element(){return -Double.parseDouble(str)+"";}
        str = element();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String element() throws ParseException {
 /*@bgen(jjtree) element */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String str;
  Token node;
  String L_place;
  String L_offset;
  String variable [ ] = new String [ 2 ];
  String temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        node = jj_consume_token(CONSTANT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return node.image;}
        break;
      case LC:
        jj_consume_token(LC);
        str = Expression();
        jj_consume_token(RC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return str;}
        break;
      case ID:
        variable = var();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    L_place = variable [ 0 ];
    L_offset = variable [ 1 ];
    if (L_offset == null)
    {
      {if (true) return L_place;}
    }
    else
    {
      temp = "T" + ncount;
      ncount++;
      count++;
      tip += count + ":\u005ct(\u005ct=:\u005ct,\u005ct" + L_place + "[" + L_offset + "]" + "\u005ct,\u005ct_\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
      {if (true) return temp;}
    }
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] var() throws ParseException {
 /*@bgen(jjtree) var */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String variable [ ] = new String [ 2 ];
  String L_place;
  String L_offset;
    try {
      L_place = jj_consume_token(ID).image;
      L_offset = array();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    variable [ 0 ] = L_place;
    variable [ 1 ] = L_offset;
    {if (true) return variable;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String array() throws ParseException {
 /*@bgen(jjtree) array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String L_offset;
  String E_place;
  String base;
  String temp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LM:
        jj_consume_token(LM);
        E_place = Expression();
    base = E_place;
        L_offset = List(base);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return L_offset;}
        break;
      default:
        jj_la1[26] = jj_gen;
        L_offset = kong();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return L_offset;}
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String kong() throws ParseException {
 /*@bgen(jjtree) kong */
  SimpleNode jjtn000 = new SimpleNode(JJTKONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return null;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String List(String base) throws ParseException {
 /*@bgen(jjtree) List */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String base1 = base;
  String E_place;
  String temp = null;
  String L_offset;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
        E_place = Expression();
    temp = "T" + ncount;
    ncount++;
    count++;
    tip += count + ":\u005ct(\u005ct*\u005ct,\u005ct" + base1 + "\u005ct,\u005ct8\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
    count++;
    tip += count + ":\u005ct(\u005ct+\u005ct,\u005ct" + E_place + "\u005ct,\u005ct" + temp + "\u005ct,\u005ct" + temp + ")" + "\u005cr\u005cn";
        L_offset = List(temp);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return L_offset;}
        break;
      case RM:
        jj_consume_token(RM);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    L_offset = base1;
    {if (true) return L_offset;}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x200000,0x200001,0x600000,0x600000,0x600000,0x600000,0x0,0x0,0x0,0x0,0x600000,0x6c0,0x600000,0x20000000,0x0,0x600000,0x600000,0x20,0x6c0,0x3020,0x6000000,0x6000000,0x18000000,0x18000000,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x800,0x2800,0x101180,0x101180,0x101180,0x0,0x800000,0x10000,0xc10000,0x40,0x141180,0x0,0x100000,0x104000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x104000,0x10000,0x820000,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
